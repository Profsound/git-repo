__author__ = 'Нестеров  Евгений Александрович'

#EASY

# Задание-1:
# Напишите функцию, округляющую полученное произвольное десятичное число
# до кол-ва знаков (кол-во знаков передается вторым аргументом).
# Округление должно происходить по математическим правилам (0.6 --> 1, 0.4 --> 0).
# Для решения задачи не используйте встроенные функции и функции из модуля math.

def my_round(number_str, ndigits):
    i = number_str.index('.') + ndigits
#    print(i)
#    print(number_str[i])
    end_elem = number_str[i]
    if int(number_str[i+1]) > 4:
        end_elem = int(number_str[i]) + 1
    else:
        pass
#    print(end_elem)
    return(number_str[: i] + str(end_elem))


a = input("Введите произвольное вещественное число: ")
b = input("Введите количество знаков после запятой: ")
print(my_round(str(a), int(b)))


# Задание-2:
# Дан шестизначный номер билета. Определить, является ли билет счастливым.
# Решение реализовать в виде функции.
# Билет считается счастливым, если сумма его первых и последних цифр равны.
# !!!P.S.: функция не должна НИЧЕГО print'ить

def lucky_ticket(ticket_number):
    return {True: "Ура, билет счастливый!", False: " Увы, билет обычный!"} [sum(map(int, ticket_number[:3])) == sum(map(int, ticket_number[3:]))]
a = input("Введите произвольное шестизначное число: ")
if not a.isnumeric():
    print('Введите число, а не всякую ерунду!')
elif len(a) != 6:
    print('Введите именно 6 цифр')
else:
    print(lucky_ticket(a))


#NORMAL

# Задание-1:
# Напишите функцию, возвращающую ряд Фибоначчи с n-элемента до m-элемента.
# Первыми элементами ряда считать цифры 1 1

def fibonacci(n, m):
    x1, x2 = 1, 1
    y = [1, ]
    for i in range(m):
        x1, x2 = x2, x1 + x2
        y.append(x1)
    return y[n - 1:m]
z1 = int(input("Введите n:"))
z2 = int(input("Введите m"))
print('fibonacci(1, 6): ', fibonacci(z1, z2))


# Задача-2:
# Напишите функцию, сортирующую принимаемый список по возрастанию.
# Для сортировки используйте любой алгоритм (например пузырьковый).
# Для решения данной задачи нельзя использовать встроенную функцию и метод sort()

new_list = []
def sort_to_max(n):
    for i in n:
        new_list.append(min(n))
        n.remove(min(n))
    return new_list
my_list = [2, 10, -12, 2.5, 20, -11, 4, 4, 0]
print(sort_to_max(my_list))

# Задача-3:
# Напишите собственную реализацию стандартной функции filter.
# Разумеется, внутри нельзя использовать саму функцию filter.

через if else
через append


# Задача-4:
# Даны четыре точки А1(х1, у1), А2(x2 ,у2), А3(x3 , у3), А4(х4, у4).
# Определить, будут ли они вершинами параллелограмма.


через сравнение длин сторон и разниц 

HARD

# Задание-1:
# Написать программу, выполняющую операции (сложение и вычитание) с простыми дробями.
# Дроби вводятся и выводятся в формате:
# n x/y ,где n - целая часть, x - числитель, у - знаменатель.
# Дроби могут быть отрицательные и не иметь целой части, или иметь только целую часть.
# Примеры:
# Ввод: 5/6 + 4/7 (всё выражение вводится целиком в виде строки)
# Вывод: 1 17/42  (результат обязательно упростить и выделить целую часть)
# Ввод: -2/3 - -2
# Вывод: 1 1/3


# Задание-2:
# Дана ведомость расчета заработной платы (файл "data/workers").
# Рассчитайте зарплату всех работников, зная что они получат полный оклад,
# если отработают норму часов. Если же они отработали меньше нормы,
# то их ЗП уменьшается пропорционально, а за заждый час переработки
# они получают удвоенную ЗП, пропорциональную норме.
# Кол-во часов, которые были отработаны, указаны в файле "data/hours_of"


# Задание-3:
# Дан файл ("data/fruits") со списком фруктов.
# Записать в новые файлы все фрукты, начинающиеся с определенной буквы.
# Т.е. в одном файле будут все фрукты на букву “А”, во втором на “Б” и т.д.
# Файлы назвать соответственно.
# Пример имен файлов: fruits_А, fruits_Б, fruits_В ….
# Важно! Обратите внимание, что нет фруктов, начинающихся с некоторых букв.
# Напишите универсальный код, который будет работать с любым списком фруктов
# и распределять по файлам в зависимости от первых букв, имеющихся в списке фруктов.
# Подсказка:
# Чтобы получить список больших букв русского алфавита:
# print(list(map(chr, range(ord('А'), ord('Я')+1))))