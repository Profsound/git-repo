__author__ = 'Нестеров  Евгений Александрович'

#EASY

# Задача-1:
# Напишите скрипт, создающий директории dir_1 - dir_9 в папке,
# из которой запущен данный скрипт.
# И второй скрипт, удаляющий эти папки.


import os

make_1 = ""
remove_1 = ""

print(os.getcwd())

try:
    for i in range(9):
        make_1 = os.mkdir('dir_{}'.format(i + 1))
        print(f"Созданы папки - {'dir_{}'.format(i + 1)}")

    for i in range(9):
        remove_1 = os.rmdir('dir_{}'.format(i + 1))
        print(f"Удалены папки - {'dir_{}'.format(i + 1)}")

except OSError:
    for i in range(9):
        print(f"Не удалось создать папки {'dir_{}'.format(i + 1)}")



# Задача-2:
# Напишите скрипт, отображающий папки текущей директории.

import os

list_1 = os.listdir()
print('Список папок:')
for i, dir_1 in enumerate(list_1):
    if os.path.isdir(dir_1):
        print('{}'.format(dir_1))

# Задача-3:
# Напишите скрипт, создающий копию файла, из которого запущен данный скрипт.


import shutil
import os

file = os.path.realpath(__file__)
file_copy = file +'.copy'
if os.path.isfile(file_copy) != True:
    shutil.copy(file, file_copy)
    print("Создана копия файла: \n", file_copy)
else:
    print("Копия файла уже существует: \n", file_copy)



#NORMAL

# Задача-1:
# Напишите небольшую консольную утилиту,
# позволяющую работать с папками текущей директории.
# Утилита должна иметь меню выбора действия, в котором будут пункты:
# 1. Перейти в папку
# 2. Просмотреть содержимое текущей папки
# 3. Удалить папку
# 4. Создать папку
# При выборе пунктов 1, 3, 4 программа запрашивает название папки
# и выводит результат действия: "Успешно создано/удалено/перешел",
# "Невозможно создать/удалить/перейти"

# Для решения данной задачи используйте алгоритмы из задания easy,
# оформленные в виде соответствующих функций,
# и импортированные в данный файл из easy.py
# То есть решение из easy импортируем как модуль!

# Я решил пока без импортирования функций из Easy, чтобы поэтапно разобраться с алгоритмом.
# Функции прикручу чуть позже

import os


def func():
    print('Ваща текущая директория {}'.format(os.getcwd()))
    print("1. Перейти в папку: ")
    print("2. Просмотреть содержимое текущей папки: ")
    print("3. Удалить папку: ")
    print("2. Создать папку: ")
    do = int (input("Укажите номер действия: "))


    #1. Переходим в другую папку

    if do == 1:
        change_dir = input("Введите имя папки, в которую вы хотите перейти: ")
        os.chdir(change_dir)
        try:
            cwd = os.getcwd()
            print('Вы успешно перешли в ', cwd)
        except(FileNotFoundError, OSError):
            print('Такой папки нет: ', change_dir)

    #2. Просмотр содержимого папки
    elif do == 2:
        list_1 = os.listdir()
        print('Список содержимого текущей папки: ')
        for i, dir_1 in enumerate(list_1):
            print('{}'.format(dir_1))

    #3. Удаляем папку
    elif do == 3:
        path_1= input("Введите имя папки, которую вы хотите удалить: ")
        try:
           os.rmdir(path_1)
        except OSError:
           print(f"Не удалось удалить {path_1}")
        else:
            print(f"удачно - {path_1}")

    #4. Создаем папку
    elif do == 4:
        path_1 = input("Введите имя папки, которую вы хотите создать: ")
        try:
           os.mkdir(path_1)
        except OSError:
            print(f"Не удалось создать {path_1}")

    else:
        print("Введите значения от 1 до 4")
        func()
if __name__ == "__main__":
    func()

HARD

# Задание-1:
# Доработайте реализацию программы из примера examples/5_with_args.py,
# добавив реализацию следующих команд (переданных в качестве аргументов):
#   cp <file_name> - создает копию указанного файла
#   rm <file_name> - удаляет указанный файл (запросить подтверждение операции)
#   cd <full_path or relative_path> - меняет текущую директорию на указанную
#   ls - отображение полного пути текущей директории
# путь считать абсолютным (full_path) -
# в Linux начинается с /, в Windows с имени диска,
# все остальные пути считать относительными.

# Важно! Все операции должны выполняться в той директории, в который вы находитесь.
# Исходной директорией считать ту, в которой был запущен скрипт.

# P.S. По возможности, сделайте кросс-платформенную реализацию.
